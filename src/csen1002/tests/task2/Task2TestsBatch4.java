package csen1002.tests.task2;

import static org.junit.jupiter.api.Assertions.*;

import java.util.concurrent.TimeUnit;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import csen1002.main.task2.NfaToDfa;

@Timeout(value = 5, unit = TimeUnit.SECONDS, threadMode = ThreadMode.SEPARATE_THREAD)
public class Task2TestsBatch4 {

	@Test
	public void testNfa1() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7#t;z#0,t,1;0,t,3;0,t,5;0,t,6;0,t,4;0,t,7;0,t,0;0,z,4;0,z,7;0,z,1;0,z,2;0,z,0;0,z,3;0,z,6;1,t,6;1,t,7;1,t,1;1,t,3;1,z,6;1,z,7;1,z,0;1,z,2;2,t,4;2,t,1;2,t,6;2,t,2;2,t,3;2,t,0;2,z,7;2,z,2;2,z,1;2,z,4;3,t,6;3,t,1;3,t,0;3,t,2;3,t,7;3,z,5;3,z,3;3,z,7;3,z,2;4,t,0;4,t,2;4,t,3;4,t,4;4,z,1;4,z,3;4,z,5;4,z,2;5,t,3;5,t,5;5,t,0;5,t,4;5,t,1;5,z,6;5,z,7;5,z,2;5,z,3;5,z,0;5,z,5;6,t,4;6,t,3;6,t,5;6,t,6;6,t,0;6,z,6;6,z,0;6,z,7;6,z,4;6,z,5;7,t,6;7,t,4;7,t,2;7,t,7;7,t,1;7,z,5;7,z,1;7,z,4;7,z,2;7,z,7;7,z,6#0#3;6");
		assertEquals("0;0/1/2/3/4/5/6/7;0/1/2/3/4/6/7;0/1/3/4/5/6/7#t;z#0,t,0/1/3/4/5/6/7;0,z,0/1/2/3/4/6/7;0/1/2/3/4/5/6/7,t,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,z,0/1/2/3/4/5/6/7;0/1/2/3/4/6/7,t,0/1/2/3/4/5/6/7;0/1/2/3/4/6/7,z,0/1/2/3/4/5/6/7;0/1/3/4/5/6/7,t,0/1/2/3/4/5/6/7;0/1/3/4/5/6/7,z,0/1/2/3/4/5/6/7#0#0/1/2/3/4/5/6/7;0/1/2/3/4/6/7;0/1/3/4/5/6/7", nfaToDfa.toString());
	}

	@Test
	public void testNfa2() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9#a;j;z#0,a,8;0,a,5;0,a,2;0,a,6;0,a,4;0,a,0;0,j,0;0,j,3;0,j,7;0,j,8;0,j,4;0,z,1;0,z,2;0,z,3;0,z,9;0,z,6;0,z,5;1,a,3;1,a,2;1,a,9;1,a,4;1,j,5;1,j,1;1,j,6;1,j,8;1,j,2;1,j,3;1,j,7;1,z,8;1,z,6;1,z,3;1,z,4;1,z,9;2,a,4;2,a,2;2,a,8;2,a,3;2,a,6;2,j,7;2,j,2;2,j,8;2,j,9;2,z,1;2,z,6;2,z,4;2,z,7;2,z,3;2,z,2;2,z,9;3,a,5;3,a,8;3,a,7;3,a,0;3,j,1;3,j,6;3,j,2;3,j,0;3,j,5;3,j,3;3,z,4;3,z,6;3,z,2;3,z,9;3,z,0;3,z,1;3,z,7;4,a,4;4,a,6;4,a,0;4,a,5;4,a,3;4,j,5;4,j,3;4,j,9;4,j,7;4,j,0;4,j,4;4,j,2;4,z,1;4,z,9;4,z,5;4,z,2;4,z,6;4,z,4;5,a,0;5,a,2;5,a,9;5,a,1;5,j,5;5,j,1;5,j,4;5,j,3;5,z,1;5,z,0;5,z,6;5,z,2;5,z,9;5,z,7;5,z,8;6,a,7;6,a,1;6,a,3;6,a,2;6,j,1;6,j,0;6,j,6;6,j,4;6,j,3;6,j,2;6,j,8;6,z,0;6,z,5;6,z,6;6,z,7;6,z,9;6,z,2;7,a,6;7,a,2;7,a,0;7,a,3;7,j,8;7,j,2;7,j,1;7,j,7;7,z,1;7,z,8;7,z,2;7,z,7;8,a,8;8,a,6;8,a,0;8,a,7;8,j,1;8,j,6;8,j,0;8,j,8;8,j,5;8,j,4;8,j,2;8,z,2;8,z,6;8,z,5;8,z,4;8,z,1;8,z,3;9,a,7;9,a,3;9,a,5;9,a,8;9,a,4;9,j,2;9,j,7;9,j,5;9,j,4;9,z,5;9,z,0;9,z,2;9,z,3#8#5;6");
		assertEquals("0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7/8/9;0/1/2/4/5/6/8;0/6/7/8;1/2/3/4/5/6;8#a;j;z#0/1/2/3/4/5/6/7/8,a,0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/7/8,j,0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/7/8,z,0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/7/8/9,a,0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/7/8/9,j,0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/7/8/9,z,0/1/2/3/4/5/6/7/8/9;0/1/2/4/5/6/8,a,0/1/2/3/4/5/6/7/8/9;0/1/2/4/5/6/8,j,0/1/2/3/4/5/6/7/8/9;0/1/2/4/5/6/8,z,0/1/2/3/4/5/6/7/8/9;0/6/7/8,a,0/1/2/3/4/5/6/7/8;0/6/7/8,j,0/1/2/3/4/5/6/7/8;0/6/7/8,z,0/1/2/3/4/5/6/7/8/9;1/2/3/4/5/6,a,0/1/2/3/4/5/6/7/8/9;1/2/3/4/5/6,j,0/1/2/3/4/5/6/7/8/9;1/2/3/4/5/6,z,0/1/2/3/4/5/6/7/8/9;8,a,0/6/7/8;8,j,0/1/2/4/5/6/8;8,z,1/2/3/4/5/6#8#0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7/8/9;0/1/2/4/5/6/8;0/6/7/8;1/2/3/4/5/6", nfaToDfa.toString());
	}

	@Test
	public void testNfa3() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11#i;m;n;o#0,i,1;1,e,5;2,o,3;3,e,5;4,e,0;4,e,2;5,i,6;6,e,7;6,e,9;7,n,8;8,e,11;9,m,10;10,e,11#4#11");
		assertEquals("-1;0/2/4;1/5;3/5;6/7/9;8/11;10/11#i;m;n;o#-1,i,-1;-1,m,-1;-1,n,-1;-1,o,-1;0/2/4,i,1/5;0/2/4,m,-1;0/2/4,n,-1;0/2/4,o,3/5;1/5,i,6/7/9;1/5,m,-1;1/5,n,-1;1/5,o,-1;3/5,i,6/7/9;3/5,m,-1;3/5,n,-1;3/5,o,-1;6/7/9,i,-1;6/7/9,m,10/11;6/7/9,n,8/11;6/7/9,o,-1;8/11,i,-1;8/11,m,-1;8/11,n,-1;8/11,o,-1;10/11,i,-1;10/11,m,-1;10/11,n,-1;10/11,o,-1#0/2/4#8/11;10/11", nfaToDfa.toString());
	}

	@Test
	public void testNfa4() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4#o;p#0,o,1;1,e,2;2,e,3;3,p,4#0#4");
		assertEquals("-1;0;1/2/3;4#o;p#-1,o,-1;-1,p,-1;0,o,1/2/3;0,p,-1;1/2/3,o,-1;1/2/3,p,4;4,o,-1;4,p,-1#0#4", nfaToDfa.toString());
	}

	@Test
	public void testNfa5() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11#v;x#0,v,9;0,v,1;0,v,6;0,v,10;0,v,0;0,x,4;0,x,9;0,x,6;0,x,8;0,x,0;0,x,5;1,v,9;1,v,1;1,v,2;1,v,3;1,x,4;1,x,8;1,x,11;1,x,9;2,v,8;2,v,2;2,v,5;2,v,1;2,x,9;2,x,6;2,x,5;2,x,10;2,x,2;3,v,6;3,v,4;3,v,11;3,v,0;3,v,9;3,x,7;3,x,9;3,x,6;3,x,11;4,v,4;4,v,6;4,v,8;4,v,0;4,v,10;4,v,3;4,v,5;4,x,4;4,x,2;4,x,9;4,x,11;4,x,1;5,v,11;5,v,5;5,v,2;5,v,1;5,v,0;5,x,0;5,x,11;5,x,8;5,x,3;5,x,1;6,v,6;6,v,3;6,v,11;6,v,1;6,x,11;6,x,1;6,x,3;6,x,5;6,x,7;6,x,8;7,v,2;7,v,4;7,v,8;7,v,9;7,x,0;7,x,11;7,x,9;7,x,8;7,x,2;7,x,10;8,v,3;8,v,4;8,v,6;8,v,11;8,v,5;8,v,8;8,v,1;8,x,4;8,x,8;8,x,9;8,x,0;8,x,1;8,x,10;9,v,1;9,v,2;9,v,10;9,v,7;9,v,4;9,v,6;9,v,8;9,x,3;9,x,1;9,x,6;9,x,4;9,x,5;9,x,2;10,v,9;10,v,5;10,v,3;10,v,1;10,v,0;10,v,8;10,v,4;10,x,10;10,x,3;10,x,0;10,x,5;10,x,4;10,x,6;10,x,9;11,v,2;11,v,7;11,v,1;11,v,8;11,v,4;11,x,3;11,x,7;11,x,1;11,x,0;11,x,5;11,x,2;11,x,8#5#1;2;8;9");
		assertEquals("0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/5/11;0/1/3/8/11;5#v;x#0/1/2/3/4/5/6/7/8/9/10/11,v,0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/3/4/5/6/7/8/9/10/11,x,0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/5/11,v,0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/5/11,x,0/1/2/3/4/5/6/7/8/9/10/11;0/1/3/8/11,v,0/1/2/3/4/5/6/7/8/9/10/11;0/1/3/8/11,x,0/1/2/3/4/5/6/7/8/9/10/11;5,v,0/1/2/5/11;5,x,0/1/3/8/11#5#0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/5/11;0/1/3/8/11", nfaToDfa.toString());
	}

	@Test
	public void testNfa6() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8#d;j;l#0,d,3;0,d,0;0,d,5;0,d,1;0,d,6;0,d,7;0,d,2;0,j,3;0,j,4;0,j,0;0,j,6;0,j,1;0,j,2;0,j,5;0,l,5;0,l,3;0,l,4;0,l,0;0,l,6;0,l,1;0,l,2;1,d,3;1,d,1;1,d,8;1,d,2;1,j,8;1,j,5;1,j,7;1,j,1;1,l,0;1,l,3;1,l,4;1,l,7;1,l,5;1,l,2;2,d,0;2,d,2;2,d,7;2,d,8;2,j,2;2,j,3;2,j,5;2,j,4;2,j,6;2,j,1;2,j,8;2,l,6;2,l,4;2,l,2;2,l,0;2,l,8;2,l,1;2,l,5;3,d,4;3,d,1;3,d,8;3,d,5;3,d,7;3,d,6;3,d,2;3,j,5;3,j,7;3,j,0;3,j,8;3,l,6;3,l,3;3,l,0;3,l,2;3,l,7;3,l,4;4,d,8;4,d,1;4,d,2;4,d,4;4,d,0;4,d,5;4,d,3;4,j,3;4,j,7;4,j,8;4,j,6;4,l,4;4,l,2;4,l,6;4,l,5;4,l,0;4,l,7;5,d,4;5,d,8;5,d,0;5,d,6;5,d,5;5,d,7;5,d,3;5,j,7;5,j,5;5,j,1;5,j,8;5,j,6;5,l,7;5,l,6;5,l,3;5,l,4;5,l,0;6,d,7;6,d,0;6,d,2;6,d,4;6,d,3;6,j,8;6,j,3;6,j,5;6,j,2;6,j,7;6,l,7;6,l,8;6,l,2;6,l,4;6,l,1;6,l,3;6,l,0;7,d,1;7,d,6;7,d,2;7,d,8;7,d,3;7,d,4;7,j,7;7,j,3;7,j,1;7,j,5;7,j,0;7,j,8;7,l,5;7,l,3;7,l,2;7,l,6;7,l,4;7,l,7;8,d,2;8,d,8;8,d,1;8,d,5;8,d,4;8,j,7;8,j,0;8,j,2;8,j,3;8,j,5;8,j,4;8,l,7;8,l,2;8,l,8;8,l,3;8,l,6#6#3;5;6;7");
		assertEquals("0/1/2/3/4/5/6/7/8;0/1/2/3/4/7/8;0/2/3/4/7;2/3/5/7/8;6#d;j;l#0/1/2/3/4/5/6/7/8,d,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7/8,j,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7/8,l,0/1/2/3/4/5/6/7/8;0/1/2/3/4/7/8,d,0/1/2/3/4/5/6/7/8;0/1/2/3/4/7/8,j,0/1/2/3/4/5/6/7/8;0/1/2/3/4/7/8,l,0/1/2/3/4/5/6/7/8;0/2/3/4/7,d,0/1/2/3/4/5/6/7/8;0/2/3/4/7,j,0/1/2/3/4/5/6/7/8;0/2/3/4/7,l,0/1/2/3/4/5/6/7/8;2/3/5/7/8,d,0/1/2/3/4/5/6/7/8;2/3/5/7/8,j,0/1/2/3/4/5/6/7/8;2/3/5/7/8,l,0/1/2/3/4/5/6/7/8;6,d,0/2/3/4/7;6,j,2/3/5/7/8;6,l,0/1/2/3/4/7/8#6#0/1/2/3/4/5/6/7/8;0/1/2/3/4/7/8;0/2/3/4/7;2/3/5/7/8;6", nfaToDfa.toString());
	}

	@Test
	public void testNfa7() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8#a;c;u#0,a,0;0,a,1;0,a,3;0,a,4;0,a,8;0,a,5;0,c,5;0,c,6;0,c,4;0,c,2;0,c,3;0,c,1;0,u,7;0,u,1;0,u,2;0,u,8;0,u,0;0,u,5;0,u,3;1,a,0;1,a,1;1,a,2;1,a,6;1,a,7;1,a,4;1,a,5;1,c,6;1,c,8;1,c,1;1,c,2;1,u,4;1,u,2;1,u,3;1,u,6;2,a,3;2,a,2;2,a,7;2,a,0;2,a,5;2,a,4;2,c,7;2,c,2;2,c,3;2,c,4;2,u,4;2,u,3;2,u,5;2,u,2;2,u,8;3,a,8;3,a,3;3,a,7;3,a,6;3,c,0;3,c,6;3,c,1;3,c,4;3,c,3;3,u,3;3,u,7;3,u,5;3,u,6;3,u,2;3,u,1;4,a,8;4,a,5;4,a,0;4,a,4;4,c,6;4,c,2;4,c,8;4,c,0;4,c,1;4,c,4;4,u,4;4,u,3;4,u,7;4,u,8;5,a,4;5,a,7;5,a,5;5,a,0;5,c,6;5,c,2;5,c,1;5,c,4;5,c,5;5,u,0;5,u,8;5,u,2;5,u,7;6,a,0;6,a,5;6,a,4;6,a,1;6,a,7;6,a,3;6,a,8;6,c,0;6,c,4;6,c,8;6,c,7;6,c,1;6,u,0;6,u,5;6,u,8;6,u,4;6,u,3;6,u,2;6,u,7;7,a,3;7,a,8;7,a,4;7,a,1;7,a,2;7,a,5;7,c,3;7,c,8;7,c,4;7,c,7;7,u,0;7,u,7;7,u,5;7,u,1;7,u,3;7,u,2;8,a,0;8,a,2;8,a,6;8,a,3;8,c,4;8,c,2;8,c,0;8,c,6;8,u,7;8,u,8;8,u,3;8,u,6;8,u,4#3#2;3;5;7");
		assertEquals("0/1/2/3/4/5/6/7/8;0/1/2/3/4/6/7/8;0/1/3/4/6;1/2/3/5/6/7;3;3/6/7/8#a;c;u#0/1/2/3/4/5/6/7/8,a,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7/8,c,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7/8,u,0/1/2/3/4/5/6/7/8;0/1/2/3/4/6/7/8,a,0/1/2/3/4/5/6/7/8;0/1/2/3/4/6/7/8,c,0/1/2/3/4/5/6/7/8;0/1/2/3/4/6/7/8,u,0/1/2/3/4/5/6/7/8;0/1/3/4/6,a,0/1/2/3/4/5/6/7/8;0/1/3/4/6,c,0/1/2/3/4/5/6/7/8;0/1/3/4/6,u,0/1/2/3/4/5/6/7/8;1/2/3/5/6/7,a,0/1/2/3/4/5/6/7/8;1/2/3/5/6/7,c,0/1/2/3/4/5/6/7/8;1/2/3/5/6/7,u,0/1/2/3/4/5/6/7/8;3,a,3/6/7/8;3,c,0/1/3/4/6;3,u,1/2/3/5/6/7;3/6/7/8,a,0/1/2/3/4/5/6/7/8;3/6/7/8,c,0/1/2/3/4/6/7/8;3/6/7/8,u,0/1/2/3/4/5/6/7/8#3#0/1/2/3/4/5/6/7/8;0/1/2/3/4/6/7/8;0/1/3/4/6;1/2/3/5/6/7;3;3/6/7/8", nfaToDfa.toString());
	}

	@Test
	public void testNfa8() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7#f;o;p;w#0,f,1;1,o,2;2,p,3;3,e,7;4,w,5;5,e,7;6,e,0;6,e,4#6#7");
		assertEquals("-1;0/4/6;1;2;3/7;5/7#f;o;p;w#-1,f,-1;-1,o,-1;-1,p,-1;-1,w,-1;0/4/6,f,1;0/4/6,o,-1;0/4/6,p,-1;0/4/6,w,5/7;1,f,-1;1,o,2;1,p,-1;1,w,-1;2,f,-1;2,o,-1;2,p,3/7;2,w,-1;3/7,f,-1;3/7,o,-1;3/7,p,-1;3/7,w,-1;5/7,f,-1;5/7,o,-1;5/7,p,-1;5/7,w,-1#0/4/6#3/7;5/7", nfaToDfa.toString());
	}

	@Test
	public void testNfa9() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11;12;13#v;w;x#0,v,1;1,e,13;2,x,3;3,e,7;4,v,5;5,e,7;6,e,2;6,e,4;7,e,11;8,w,9;9,e,11;10,e,6;10,e,8;11,e,13;12,e,0;12,e,10#12#13");
		assertEquals("-1;0/2/4/6/8/10/12;1/5/7/11/13;3/7/11/13;9/11/13#v;w;x#-1,v,-1;-1,w,-1;-1,x,-1;0/2/4/6/8/10/12,v,1/5/7/11/13;0/2/4/6/8/10/12,w,9/11/13;0/2/4/6/8/10/12,x,3/7/11/13;1/5/7/11/13,v,-1;1/5/7/11/13,w,-1;1/5/7/11/13,x,-1;3/7/11/13,v,-1;3/7/11/13,w,-1;3/7/11/13,x,-1;9/11/13,v,-1;9/11/13,w,-1;9/11/13,x,-1#0/2/4/6/8/10/12#1/5/7/11/13;3/7/11/13;9/11/13", nfaToDfa.toString());
	}

	@Test
	public void testNfa10() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6#b;i;l#0,l,1;1,e,5;2,b,3;3,e,5;4,e,0;4,e,2;5,i,6#4#6");
		assertEquals("-1;0/2/4;1/5;3/5;6#b;i;l#-1,b,-1;-1,i,-1;-1,l,-1;0/2/4,b,3/5;0/2/4,i,-1;0/2/4,l,1/5;1/5,b,-1;1/5,i,6;1/5,l,-1;3/5,b,-1;3/5,i,6;3/5,l,-1;6,b,-1;6,i,-1;6,l,-1#0/2/4#6", nfaToDfa.toString());
	}

}